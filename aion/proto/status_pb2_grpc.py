# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aion.proto import status_pb2 as proto_dot_kanbanpb_dot_status__pb2


class KanbanStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReceiveKanban = channel.unary_stream(
                '/kanbanpb.Kanban/ReceiveKanban',
                request_serializer=proto_dot_kanbanpb_dot_status__pb2.InitializeService.SerializeToString,
                response_deserializer=proto_dot_kanbanpb_dot_status__pb2.StatusKanban.FromString,
                )
        self.SendKanban = channel.unary_unary(
                '/kanbanpb.Kanban/SendKanban',
                request_serializer=proto_dot_kanbanpb_dot_status__pb2.Request.SerializeToString,
                response_deserializer=proto_dot_kanbanpb_dot_status__pb2.Response.FromString,
                )


class KanbanServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReceiveKanban(self, request, context):
        """最新のCカンバンを取得する
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendKanban(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KanbanServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReceiveKanban': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveKanban,
                    request_deserializer=proto_dot_kanbanpb_dot_status__pb2.InitializeService.FromString,
                    response_serializer=proto_dot_kanbanpb_dot_status__pb2.StatusKanban.SerializeToString,
            ),
            'SendKanban': grpc.unary_unary_rpc_method_handler(
                    servicer.SendKanban,
                    request_deserializer=proto_dot_kanbanpb_dot_status__pb2.Request.FromString,
                    response_serializer=proto_dot_kanbanpb_dot_status__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kanbanpb.Kanban', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Kanban(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReceiveKanban(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/kanbanpb.Kanban/ReceiveKanban',
            proto_dot_kanbanpb_dot_status__pb2.InitializeService.SerializeToString,
            proto_dot_kanbanpb_dot_status__pb2.StatusKanban.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendKanban(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kanbanpb.Kanban/SendKanban',
            proto_dot_kanbanpb_dot_status__pb2.Request.SerializeToString,
            proto_dot_kanbanpb_dot_status__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SendAnythingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServiceBrokerConn = channel.stream_stream(
                '/kanbanpb.SendAnything/ServiceBrokerConn',
                request_serializer=proto_dot_kanbanpb_dot_status__pb2.SendKanban.SerializeToString,
                response_deserializer=proto_dot_kanbanpb_dot_status__pb2.SendKanban.FromString,
                )
        self.SendToOtherDevices = channel.stream_unary(
                '/kanbanpb.SendAnything/SendToOtherDevices',
                request_serializer=proto_dot_kanbanpb_dot_status__pb2.SendContext.SerializeToString,
                response_deserializer=proto_dot_kanbanpb_dot_status__pb2.UploadStatus.FromString,
                )


class SendAnythingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ServiceBrokerConn(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendToOtherDevices(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SendAnythingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ServiceBrokerConn': grpc.stream_stream_rpc_method_handler(
                    servicer.ServiceBrokerConn,
                    request_deserializer=proto_dot_kanbanpb_dot_status__pb2.SendKanban.FromString,
                    response_serializer=proto_dot_kanbanpb_dot_status__pb2.SendKanban.SerializeToString,
            ),
            'SendToOtherDevices': grpc.stream_unary_rpc_method_handler(
                    servicer.SendToOtherDevices,
                    request_deserializer=proto_dot_kanbanpb_dot_status__pb2.SendContext.FromString,
                    response_serializer=proto_dot_kanbanpb_dot_status__pb2.UploadStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kanbanpb.SendAnything', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SendAnything(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ServiceBrokerConn(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/kanbanpb.SendAnything/ServiceBrokerConn',
            proto_dot_kanbanpb_dot_status__pb2.SendKanban.SerializeToString,
            proto_dot_kanbanpb_dot_status__pb2.SendKanban.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendToOtherDevices(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/kanbanpb.SendAnything/SendToOtherDevices',
            proto_dot_kanbanpb_dot_status__pb2.SendContext.SerializeToString,
            proto_dot_kanbanpb_dot_status__pb2.UploadStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
